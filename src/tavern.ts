import {getMessageCommand, getCharacterAttribute, getCharacterIdFromName} from "./utility";
import { DefaultTavernState } from "./assets";
import { TavernState, Command } from "./models";

const TAVERN_NAME = "Egészséges Kecske Kocsma";

export function handleTavernCommands(msg:ChatEventData)
{
    if (msg.content.startsWith("!"))
    {
        let cmd = getMessageCommand(msg.content);
        if (msg.content === "!ujkocsma")
        {
            getTavernCharacter();
        }
        if (msg.content === "!kocsma")
        {
            sendChat(TAVERN_NAME,"Hello ! :D");
            let state = getTavernState();
        }

        if (msg.content === "!kocsma-raktar")
        {
            displayInventory();
        }

        if (cmd.command === "!kocsma-dolgozok")
        {
            setDolgozok(cmd);
        }

        if (cmd.command === "!kocsma-vetel")
        {
            handleBuyingStock(cmd);
        }
    }
}

function handleBuyingStock(cmd:Command)
{
    if (cmd.args.length >= 3)
    {
        let who = cmd.args[0]
        let what = cmd.args[1];
		let howMuch = parseInt(cmd.args[2]);
		let playerMoney = getPlayerMoneyAttrib(who);
		let oldState = getTavernState();
		let buyDef = oldState.defs[what];
		let totalCostOfPurchase = buyDef.buyPrice.price * howMuch;
		let playerMoneyNumber = parseInt(playerMoney.get("current"));

		if (oldState.inv[what] !== undefined)
        {
			if (canPlayerAffordItem(totalCostOfPurchase,playerMoney))
			{
				(playerMoney as any).set("current", playerMoneyNumber-totalCostOfPurchase+"");
				addStock(what,buyDef.buyPrice.for*howMuch);
				sendChat(TAVERN_NAME,`&{template:default} {{name=Kocsma}} {{Megvéve=${what}}} {{Hány hordó=${howMuch} hordó}} {{Hány kiszerelés=${howMuch*buyDef.buyPrice.for} kiszerelés}} {{Mennyibe került=${totalCostOfPurchase} gp}}`);
			}
			else
			{
				sendChat(TAVERN_NAME,`Nincs elég pénzed ezt megvenni :'( Ennyi pénzed van: ${playerMoneyNumber} gp, ennyibe került volna: ${totalCostOfPurchase} gp`)
			}
		}
		else
		{
			sendChat(TAVERN_NAME,"Ilyen ital nem létezik!")
		}
	}
}

function addStock(what:string,much:number)
{
	let tavernState = getTavernState();
	let newState = Object.assign({},tavernState);
	if (newState[what] === undefined){
		newState[what] = much;
	}
	else{
		newState.inv[what] += much;
	}
	setTavernState(newState);
}

function canPlayerAffordItem(cost:number , playerMoney:Attribute) : boolean
{
	return parseInt(playerMoney.get("current")) >= cost;
}

function getPlayerMoneyAttrib(playerName:string) : Attribute
{
	let charId = getCharacterIdFromName(playerName);
	let atrib = getCharacterAttribute(charId,"gp");
	log(atrib);
	return atrib;
}

function setDolgozok(cmd)
{
    if (cmd.args.length >= 3)
    {
        let ink = parseInt(cmd.args[0]);
        let serv = parseInt(cmd.args[1]);
        let guard = parseInt(cmd.args[2]);
        let oldState = getTavernState();
        let news = Object.assign({},oldState);
        news.innkeeperModifier = ink;
        news.serverModifier = serv;
        news.guardModifier = guard;

        setTavernState(news);
        sendChat(TAVERN_NAME,"Dolgozok beallitva : "+cmd.args.join(" "))
    }
}

function displayInventory()
{
    let state = getTavernState();
    let items = [];
    for (let kk in state.inv)
    {
        items.push(`{{${kk}=${state.inv[kk]} kiszerelés}}`);
    }
	let body = `&{template:default} {{name=Kocsma}} ${items.join(" ")}`

    sendChat(TAVERN_NAME,body);
}

function getStateAtrib() : Attribute
{
    let tavern = getTavernCharacter();
    let tid = tavern.id;
    let atrib = filterObjs((obj:any) => obj.get("_type") === "attribute" && obj.get("_characterid") === tid && obj.get("name") === "state") as Attribute[];

    return atrib[0];

}

function getTavernState() : TavernState
{
    let atrib = getStateAtrib();
    let ss = atrib.get("current");
    if (ss !== undefined){
        return JSON.parse(ss) as TavernState;
    }
    return DefaultTavernState;
}

function setTavernState(news:TavernState)
{
    let atrib:any = getStateAtrib();
    atrib.set("current",JSON.stringify(news));
}

function getDefaultTavernState() :TavernState
{
    return DefaultTavernState;
}

function getTavernCharacter()
{
    let existingTavern = findTavernCharacter();
    if (!existingTavern)
    {
        return createTavernCharacter();
    }
    return existingTavern;
}

function createTavernCharacter()
{
    let tavern = createObj("character",{
        name:"tavern",
        bio:"Autogenerated Trollskull tavern",
        inplayerjournals:"all"
    });

    createObj("attribute", { name: "state", current: JSON.stringify(getDefaultTavernState()), max: "", _characterid:tavern.get("_id")});
    return tavern;
}

function findTavernCharacter()
{
    let taverns = filterObjs(function (obj:any)
    {
        if (obj.get("_type") === "character" && obj.get("name") === "tavern")
        {
            return true;
        }
        return false;
    });

    if (taverns.length > 0)
    {
        return taverns[0];
    }
    else
    {
        return undefined;
    }
}
